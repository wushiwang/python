1.centos7利用crontab执行定时任务
    1.1 查看cron状态，设置为开机启动
        $ systemctl status crond(查看状态)
        $ systemctl enable crond(设为开机启动)
        $ systemctl start crond (启动服务）
    1.2 编辑crontab的配置文件，设置定时任务
        $ crontab ‐u 用户名 ‐e （编辑用户的定时任务，指定的执行的用户，默认为当前执行命令的用户）
        ‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
        # crontab基本格式
        # +‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐ minute 分钟(0 ‐ 59)
        # | +‐‐‐‐‐‐‐‐‐‐‐‐‐ hour 小时(0 ‐ 23)
        # | | +‐‐‐‐‐‐‐‐‐‐ day 日期(1 ‐ 31)
        # | | | +‐‐‐‐‐‐‐ month 月份(1 ‐ 12)
        # | | | | +‐‐‐‐ week 星期(0 ‐ 7) (星期天=0 or 7)
        # | | | | |
        # * * * * * 要运行的命令
        */30 * * * * /usr/local/mycommand (每天，每30分钟执行一次 mycommand命令)
        ‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
        $ crontab ‐u 用户名 ‐l （列出用户的定时任务列表）
    1.3 保存退出后，即可生效，默认crontab会每分钟检查一次任务文件的。
        除了这样编辑外，还可以直接写到crond的主配置文件内，默认执行者为root。
        $ vim /etc/crontab （直接在最下面添加你的任务命令即可）
    1.4 注意事项
        特别注意，crond的任务计划， 有并不会调用用户设置的环境变量，它有自己的环境变量，当你用到一些命令时，比如
    mysqldump等需要环境变量的命令，手工执行脚本时是正常的，但用crond执行的时候就会不行，这时你要么写完整的绝对路
    径，要么将环境变量添加到 /etc/crontab 中。
    
2.定时任务不执行的分析方法
    2.1 检查日志
        根据经验，先看一下crontab的日志：
            tail /var/log/messages
        没发现相关日志，看来不是打印到了这，于是查看了下crontab的默认日志位置：
            tail /var/log/cron
                Mar 25 21:40:01 li733‐135 CROND[1959]: (root) CMD (sh /data/app_server/checkprocess.sh >/dev/null 2>&1)
                Mar 25 21:40:01 li733‐135 CROND[1960]: (root) CMD (/usr/lib64/sa/sa1 1 1)
                Mar 25 21:40:01 li733‐135 CROND[1961]: (root) CMD (/usr/sbin/ntpdate pool.ntp.org > /dev/null 2>&1)
                Mar 25 21:41:01 li733‐135 CROND[2066]: (root) CMD (sh /data/app_server/checkprocess.sh >/dev/null 2>&1)
         很明显，任务计划确实在正常执行着，看来问题在脚本上了。
     2.2 检查脚本
         2.2.1 直接执行
            检查脚本第一步，直接按照crontab里面的命令行，执行脚本：
            sh /data/app_server/checkprocess.sh
                [ Fri Mar 25 21:25:01 CST 2016 ] : my_app is down, start it!
            sh /data/app_server/checkprocess.sh
                my_app is OK!
            结果进程正常拉起了！
            直接执行成功，而放到crontab就失败，经验告诉我肯定的脚本环境变量有问题了！
         2.2.2 环境变量
                于是在脚本里面载入环境变量：
                #!/bin/bash
                #先载入环境变量
                source /etc/profile
                #其他代码不变
                然后手工把进程杀死，等待自拉起，结果… 还是不行！
         2.2.3 系统邮件
                经验告诉我，crontab执行失败，如果没有屏蔽错误的话，会产生一个系统邮件，
                位置在 /var/spool/mail/root
                所以，我把crontab里面的 2>&1 这个屏蔽错误先取消掉，等待几分钟查看邮件。
                cat /var/spool/mail/root 发现有如下报错：
                    From root@free‐node‐us.localdomain Fri Mar 25 21:30:02 2016
                    X‐Original‐To: root
                    Delivered‐To: root@app_server.localdomain
                    Received: by app_server.localdomain (Postfix, from userid 0)
                    id 78DB5403E2; Fri, 25 Mar 2016 21:19:02 +0800 (CST)
                    From: root@app_server.localdomain (Cron Daemon)
                    To: root@app_server.localdomain
                    Subject: Cron <root@app_server> bash /data/app_server/checkprocess.sh >/dev/null
                    Content‐Type: text/plain; charset=UTF‐8
                    Auto‐Submitted: auto‐generated
                    X‐Cron‐Env: <LANG=en_US.UTF‐8>
                    X‐Cron‐Env: <SHELL=/bin/sh>
                    X‐Cron‐Env: <HOME=/root>
                    X‐Cron‐Env: <PATH=/usr/bin:/bin>
                    X‐Cron‐Env: <LOGNAME=root>
                    X‐Cron‐Env: <USER=root>
                    Message‐Id: <20160325131902.78DB5403E2@app_server.localdomain>
                    Date: Fri, 25 Mar 2016 21:19:02 +0800 (CST)
                    start.sh: line 4: /sbin/sudo: No such file or directory #sudo命令找不到！我次奥
                居然是脚本里面的sudo执行失败了，找不到这个文件。看来单纯的载入 profile 不一定靠谱啊！
          2.2.4 修复脚本
                知道问题所在，解决就简单了，粗暴点，直接写入sudo的绝对路径
                /usr/bin/sudo
                继续测试自拉起，结果… 还是不行！
          2.2.5 最终解决
                继续查看了下系统邮件，发现如下信息：
                    Subject: Cron <root@free‐node‐us> source /etc/profile;bash /data/app_server/checkprocess.sh >/dev/null
                    Content‐Type: text/plain; charset=UTF‐8
                    Auto‐Submitted: auto‐generated
                    X‐Cron‐Env: <LANG=en_US.UTF‐8>
                    X‐Cron‐Env: <SHELL=/bin/sh>
                    X‐Cron‐Env: <HOME=/root>
                    X‐Cron‐Env: <PATH=/usr/bin:/bin>
                    X‐Cron‐Env: <LOGNAME=root>
                    X‐Cron‐Env: <USER=root>
                    Message‐Id: <20160325132403.0E8E1403E2@app_server.localdomain>
                    Date: Fri, 25 Mar 2016 21:24:03 +0800 (CST)
                    sudo: sorry, you must have a tty to run sudo #原来是这个问题！
                很明显，提示了sudo必须需要tty才能执行，解决很简单，取消这个限制即可！
                编辑 /etc/sudoers ，找到 Defaults requiretty, 然后注释掉这行：
                    vim /etc/sudoers
                    #Defaults requiretty
                最后使用 :x! 或 :wq! 强制保存即可。
                结果观察还是报了相同的错误！原来改完这个sudo并不会影响已经运行的crontab，所以需要重启crontab服务刷新下设置：
                service crond restart
          2.2.6 分析总结
                Linux系统里面计划任务，crontab 没有如期执行这是运维工作中比较常见的一种故障了，根据经验，大家可以从如下角度分析解决:
                1、检查crontab服务是否正常
                    这个一般通过查看日志来检查，也就是前文提到的 /var/log/cron 或 /var/log/messages，如果里面没有发现执行记录，那么可以
                重启下这个服务：service crond restart
                2、检查脚本的执行权限
                    一般来说，在crontab中建议使用 sh 或 bash 来执行shell脚本，避免因脚本文件的执行权限丢失导致任务失败。当然，最直接检
                查就是人工直接复制crontab -l 里面的命令行测试结果。
                3、检查脚本需要用到的变量
                    和上文一样，通常来说从crontab里面执行的脚本和人工执行的环境变量是不一样的，所以对于一些系统变量，建议写绝对路径，
                或使用witch动态获取，比如 sudo_bin=$(which sudo) 就能拿到 sudo在当前系统的绝对路径了。
                4、放大招：查看日志
                    其实，最直接最有效的就是查看执行日志了，结合crontab执行记录，以及crontab执行出错后的系统邮件，一般都能彻底找到失
                败的原因了！当然，要记住在crontab中如果屏蔽了错误信息，就不会发邮件了。
                这又让我想起了如果crontab未屏蔽日志，可能会导致硬盘 inode 爆满
3.crontab指令
    3.1 使用者权限及定时任务文件
        文件                      说明
        /etc/cron.deny            该文件中所列用户不允许使用crontab命令。
        /etc/cron.allow           该文件中所列用户允许使用crontab命令，优先于/etc/cron.deny
        /var/spool/cron           所有用户crontab配置文件默认都存放在此目录，文件名以用户名命名。
    3.2 指令选项说明表
        参数                      含义                                      指定实例
        -l（字母）                 查看crontab文件内容                       crontab -l
        -e                        编辑crontab文件内容                       crontab -e
        -i                        删除crontab文件内容，删除前会提示确认       crontab -ri
        -r                        删除crontab文件内容                       crontab -r
        -u user                   指定使用的用户执行任务                     crontab -u lee -l
        提示：crontab{-l |-e}实际上就是在操作/var/spool/cron/当前用户这样的文件。
    3.3 特殊符号含义表
        特殊符号                                            含义
           *                        *号表示任意时间都，就是“每”的意思，举例：如00 01 * * * cmd表示每月每周每日的凌晨1点执行cmd任务。
           -                        减号，表示分隔符，表示一个时间范围段，如17-19点，每小时的00分执行任务。00 17-19 * * * cmd。
                                    就是17,18,19点整点分别执行的意思。
           ，                       逗号，表示分隔时间段的意思。30 17,18,19 * * * cmd 表示每天17,18,19点的半点执行cmd。也可以和“-”
                                    结合使用，如： 30 3-5,17-19 * * * cmd。
           /n                       n代表数字，即”每隔n单位时间”,例如：每10分钟执行一次任务可以写 */1 0 * * * * cmd,其中 */10，*的范围
                                    是0-59，也可以写成0-59/0。
    3.4 书写定时任务基本要领
        3.4.1 为定时任务规则加必要的注释
                加了注释，就知道定时任务运行的是什么作业，以防以后作业混乱。这是个好习惯和规范。
                [root@angelT ~]# crontab -l
                #time sync by lee at 2014-1-14
                */5 * * * * /usr/sbin/ntpdate time.windows.com >/dev/null 2>&1
        3.4.2 定时任务命令或程序最好写到脚本里执行
                [root@angelT ~]# crontab -l
                #backup www to /backup
                00 00 * * * /bin/sh /server/scripts/www_bak.sh >/dev/null 2>&1
        3.4.3 定时任务执行的脚本要规范路径，如：/server/scripts
                [root@angelT ~]# crontab -l
                #backup www to /backup
                00 00 * * * /bin/sh /server/scripts/www_bak.sh >/dev/null 2>&1
        3.4.4 执行shell脚本任务时前加/bin/sh
                执行定时任务时，如果是执行脚本，尽量在脚本前面带上/bin/sh命名，否则有可能因为忘了为脚本设定执行权限，从而无法完成任务。
                [root@angelT ~]# crontab -l
                #backup www to /backup
                00 00 * * * /bin/sh /server/scripts/www_bak.sh >/dev/null 2>&1
        3.4.5 定时任务结尾加 >/dev/null 2>&1
                [root@angelT ~]# crontab -l
                #backup www to /backup
                00 00 * * * /bin/sh /server/scripts/www_bak.sh >/dev/null 2>&1
        3.4.6 有关/dev/null的说明
                /dev/null为特殊的字符设备文件，表示黑洞设备或空设备。
                [root@angelT ~]# ll /dev/null
                crw-rw-rw- 1 root root 1, 3 3月 26 01:10 /dev/null
        3.4.7 有关重定向的说明
                >或1> 输出重定向：把前面输出的东西输入到后边的文件中，会删除文件原有内容。
                >>或1>>追加重定向：把前面输出的东西追加到后边的文件中，不会删除文件原有内容。
                <或<0 输入重定向：输入重定向用于改变命令的输入，指定输入内容，后跟文件名。
                <<或<<0输入重定向：后跟字符串，用来表示“输入结束”，也可用ctrl+d来结束输入。
                2> 错误重定向：把错误信息输入到后边的文件中，会删除文件原有内容。
                2>> 错误追加重定向：把错误信息追加到后边的文件中，不会删除文件原有内容。
                标准输入（stdin）：代码为0，使用<或<<。
                标准输出（stdout）:代码为1，使用>或>>。正常的输出。
                标准错误输出（sederr）：代码为2，使用2>或2>>。
                特殊：
                    2>&1就是把标准错误重定向到标准输出（>&）。
                    >/dev/null 2>&1 等价于 1>/dev/null 2>/dev/null
        3.4.8 >/dev/null 2>&1的作用
              如果定时任务规范结尾不加 >/dev/null 2>&1,很容易导致硬盘inode空间被占满，从而系统服务不正常（var/spool/clientmqueue邮件临时队
        列目录，垃圾文件存放于此，如果是centos 6.4系统，默认不装sendmail服务，所以不会有这个目录。）
        3.4.9 在指定用户下执行相关定时任务
              这里要特别注意不同用户的环境变量问题，如果是调用了系统环境变量/etc/profile，最好在程序脚本中将用到的环境变量重新export下。
        3.4.10 生产任务程序不要随意打印输出信息
              在调试好脚本程序后，应尽量把DEBUG及命令输出的内容信息屏蔽掉，如果确实需要输出日志，可定向到日志文件里，避免产生系统垃圾。
        配置定时任务规范操作过程
        ①首先要在命令行操作成功，然后复制成功的命令到脚本里，在各个细小环境减少出错的机会。
        ②然后测试小本，测试成功后，复制脚本的规范路径到定时任务配置里，不要手敲。
        ③先在测试环境下测试，然后正式环境规范部署。
    3.5 生产环境中调试定时任务
        3.5.1 增加执行频率调试任务
              在调试时，把任务执行频率调快一点，看能不能正常执行，如果正常，那就没问题了，再改成需要的任务的执行时间。
        注意：有些任务时不允许频繁执行的，例如：定时往数据库里插入数据，这样的任务要在测试机上测试好，然后正式线上出问题的机会就少了。
        3.5.2 调整系统时间调试任务
              用正确的执行任务的时间，设置完成后，可以修改下系统当前时间，改成任务执行时间的前几分钟来测试（或者重启定时任务服务）
        3.5.3 通过日志输出调试定时任务
              在脚本中加入日志输出，然后把输出打到指定的日志中，然后观察日志内容的结果，看是否正确执行。
        注意一些任务命令带来的问题注意： * * * * * echo “==”>>/tmp/lee.log >/dev/null 2>&1 这里隐藏的无法正确执行的任务配置，
        原因是前面多了>>,或者去掉结尾的 >/dev/null 2>&1。
        3.5.4 注意环境变量导致的定时任务故障
            例如：在调试java程序任务的时候，注意环境变量，把环境变量的定义加到脚本里。
        3.5.5 通过定时任务日志调试定时任务
            [root@angelT ~]# tail -f /var/log/cron
            Mar 26 15:55:01 angelT CROND[3415]: (ida) CMD (/usr/sbin/ntpdate time.windows.com >/dev/null 2>&1)
            Mar 26 15:55:01 angelT CROND[3416]: (root) CMD (/usr/sbin/ntpdate time.windows.com >/dev/null 2>&1)
            Mar 26 16:00:01 angelT CROND[3422]: (root) CMD (/usr/sbin/ntpdate time.windows.com >/dev/null 2>&1)
            Mar 26 16:00:01 angelT CROND[3423]: (root) CMD (/usr/lib64/sa/sa1 1 1)
4.Linux配置定时任务的两种方法crontab -e与/etc/crontab及其区别
    方法1：
        使用命令 crontab -e 然后直接编辑定时脚本。
        这样执行以后，属于用户自定义的，会被写到 /var/spool/cron 目录下，生成一个和用户名一致的文件，文件内容就是我们编辑的定时脚本。
    如：
        [root@localhost cron.d]# cd /var/spool/cron
        [root@localhost cron]# ll
        总用量 4
        ‐rw‐‐‐‐‐‐‐. 1 root root 52 12月 9 10:58 root
        [root@localhost cron]# pwd
        /var/spool/cron
        [root@localhost cron]# cat root
        30 03 * * * /root/automysqlbackup.sh
    方法2：
        使用命令 vi /etc/crontab 编辑定时脚本。
    如：
        [root@localhost ~]# cat /etc/crontab
        SHELL=/bin/bash
        PATH=/sbin:/bin:/usr/sbin:/usr/bin
        MAILTO=root
        HOME=/
        # run‐parts
        30 * * * * root /usr/sbin/ntpdate 210.72.145.44
        #30 8 * * * root /usr/sbin/ntpdate 132.228.90.101
        01 * * * * root run‐parts /etc/cron.hourly
        02 4 * * * root run‐parts /etc/cron.daily
        22 4 * * 0 root run‐parts /etc/cron.weekly
        42 4 1 * * root run‐parts /etc/cron.monthly
        */1 * * * * root run‐parts /opt/openoffice.org3/program/start.sh
        ############################################
        30 4 * * * root /usr/bin/rsync ‐vzrtopg ‐‐progress ‐‐delete root@192.168.231.35::resource /hyy/bak/resource
        30 4 * * * root /usr/bin/rsync ‐vzrtopg ‐‐progress ‐‐delete root@192.168.231.35::log /hyy/bak/log
        ############################################
        [root@localhost ~]#
    （系统级的）做系统级配置我们会直接配置 /etc/crontab
    （用户级的）一般还是建议大家使用 crontab -e ，这样系统也会帮着检查我们配置的脚本语法。
5.mysql定时备份
    5.1 编写备份脚本
        $ cat bkDbname.sh
        #!/bin/bash
        BKPATH="/path/to/shell‐path/"
        BKDBNAME="dbname"
        BKDATE=$(date +%Y%m%d_%H%m%s)
        BKFILE=${BKPATH}${BKDBNAME}_${BKDATE}.sql.gz
        /usr/bin/mysqldump ‐uroot ‐p"password" ${BKDBNAME} | gzip>${BKFILE}
    5.2 添加定时任务
        打开编辑 /etc/crontab, 在末尾添加 定时任务.
        # back database 每天17点备份
        0 17 * * * willike sh /path/to/shell‐path/bkDbname.sh
    5.3 路径问题
        crontab运行采用独立环境，PATH变量可在/etc/crontab文件中编辑。不只是mysql或mysqldump，所有自定义的命令，都可采
    用这两种方法，让crontab能够找到该指令，这样就不会出现crontab定时脚本不能执行的现象。
        另外，一些需要更改环境变量才能执行的项目，可以在脚本开头写上source /etc/profile或者JAVA_HOME=XXXXX/export
    XXXXX（使用指定jdk等），来指定该脚本需要的环境变量。
    方案1
        采用软链接方式，将mysqldump软链接到crontab配置文件中PATH后面的任意一个下，如/usr/bin：
        ln ‐s /usr/local/mysql/bin/mysqldump /usr/bin/mysqldump
        回去编辑脚本，把mysqldump的绝对路径删掉，保存重新crontab测试，成功。
    方案2
        修改/etc/crontab的内容，在PATH最后面加上:/Your_project_path（注意冒号别掉了）（此处就是mysqldump的存放路
        径/usr/local/mysql/bin/）保存退出。
        没有软链接的情况下，测试成功。
